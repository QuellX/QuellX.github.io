{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/states/GameState.js",
    "src/states/ManuState.js",
    "src/states/ResultState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import ManuState from 'states/ManuState';\r\nimport GameState from './states/GameState';\r\nimport ResultState from './states/ResultState';                 \r\n\r\nconst game_option = {\r\n\twindowSize: {  \r\n\t\twidth: 800,\r\n\t\theight: 750\r\n\t}\r\n}     \r\n    \r\nclass Game extends Phaser.Game {   \r\n                                                     \r\n\tconstructor() {                       \t                \r\n\t\tsuper(game_option.windowSize.width, game_option.windowSize.height, Phaser.AUTO, 'content', null);    \r\n  \r\n\t\tthis.state.add('ManuState', ManuState, false);\r\n\t\tthis.state.add('GameState', GameState, false); \r\n\t\tthis.state.add('ResultState', ResultState, false);\r\n\r\n\t\tthis.state.start('ManuState');                       \r\n\t}; \r\n                        \r\n\tplayGame() {            \r\n\t\tthis.state.start('GameState');               \t       \t\r\n\t}\r\n}\r\n\r\nnew Game();\r\n",
    "class GameState extends Phaser.State {\r\n\r\n  constructor() {\r\n    super();\r\n    this.playAreaSize = {\r\n      offsetX: 100,\r\n      offsetY: 0,\r\n      tilePaddingTopAndBottom: 0,\r\n      tilePaddingLeftAndRight: 0,\r\n      tileWidth: 0,\r\n      tileHeight: 0\r\n    };\r\n\r\n    this.gridSize = {\r\n      width: 7,\r\n      height: 7\r\n    };\r\n\r\n    this.tileList = ['gem_01', 'gem_02', 'gem_03', 'gem_04', 'gem_05', 'gem_06'];\r\n    this.tilesArray = this.generateTilesMatrix();\r\n\r\n    this.selectedTile = null;\r\n    this.tilesGroup = null;\r\n\r\n    this.score = 0;\r\n    this.scoreText = null;\r\n\r\n    this.timer = 120;\r\n    this.restOfTime = this.timer;\r\n\r\n    this.cursorDisabled = false;\r\n  }\r\n\r\n  preload() {\r\n    this.load.image('background', './assets/images/backgrounds/background.jpg');\r\n\r\n    this.load.image('score', './assets/images/bg-score.png');\r\n\r\n    this.load.image('gem_01', './assets/images/game/gem-01.png');\r\n    this.load.image('gem_02', './assets/images/game/gem-02.png');\r\n    this.load.image('gem_03', './assets/images/game/gem-03.png');\r\n    this.load.image('gem_04', './assets/images/game/gem-04.png');\r\n    this.load.image('gem_05', './assets/images/game/gem-05.png');\r\n    this.load.image('gem_06', './assets/images/game/gem-06.png');\r\n\r\n    this.load.audio('select', './assets/audio/select-1.mp3');\r\n    this.load.audio('kill', './assets/audio/kill.mp3');\r\n  };\r\n\r\n  create() {\r\n    //Set background\r\n    const bg = this.add.sprite(-20, -20, 'background');\r\n    bg.scale.setTo(0.95);\r\n\r\n    //Set score board \r\n    const scroreBoard = this.add.sprite(-65, 0, 'score');\r\n    this.playAreaSize.offsetY = scroreBoard.height - 50;\r\n\r\n    //Score text\r\n    this.scoreText = this.add.text(scroreBoard.width / 4 + 20, scroreBoard.height / 2 - 40, '0', { fontSize: '44px', fill: '#fff' });\r\n\r\n    //Score text\r\n    this.timeText = this.add.text(this.game.width - 250, scroreBoard.height / 2 - 40, `Time: ${this.timer}`, { fontSize: '44px', fill: '#000' });\r\n\r\n    //Add background music\r\n    this.killMusic = this.add.audio('kill');\r\n    this.selectMusic = this.add.audio('select');\r\n\r\n    //Show Donuts\r\n    setTimeout(() => {\r\n      this.startTimer();\r\n      this.drawTiles();\r\n    }, 200);\r\n    // this.startTimer();\r\n    // this.drawTiles();\r\n\r\n  };\r\n\r\n  generateTilesMatrix() {\r\n    const tilesMatrix = [];\r\n    let tilesRow = [];\r\n\r\n    for (let row = 0; row < this.gridSize.height; row++) {\r\n      for (let col = 0; col < this.gridSize.width; col++) {\r\n\r\n        let randomTileIndex = Math.floor(Math.random() * (this.tileList.length));\r\n        tilesRow.push(this.tileList[randomTileIndex]);\r\n\r\n      };\r\n\r\n      tilesMatrix.push(tilesRow);\r\n      tilesRow = [];\r\n    };\r\n\r\n    return tilesMatrix;\r\n  }\r\n\r\n  drawTiles() {\r\n    let tilesGroup;\r\n\r\n    //Create Tiles Group to hol All Tiles\r\n\r\n    if (this.tilesGroup) {\r\n      tilesGroup = this.tilesGroup;\r\n    } else {\r\n      tilesGroup = this.add.group();\r\n    };\r\n\r\n    //Reset all children(required for redraw)\r\n    tilesGroup.removeAll(true);\r\n\r\n    for (let row = 0; row < this.tilesArray.length; row++) {\r\n      for (let col = 0; col < this.tilesArray[row].length; col++) {\r\n        //Add Donut\r\n        const tile = tilesGroup.create(0, 0, this.tilesArray[row][col]);\r\n        tile.scale.setTo(0.75);\r\n        this.setTileSize(tile);\r\n        this.calculatePadding();\r\n\r\n        //Set Donut Position\r\n        tile.x = this.playAreaSize.offsetX + col * (tile.width + this.playAreaSize.tilePaddingLeftAndRight);\r\n        tile.y = this.playAreaSize.offsetY + row * (tile.height + this.playAreaSize.tilePaddingTopAndBottom);\r\n\r\n        //Select Event\r\n        tile.inputEnabled = true;\r\n        tile.events.onInputDown.add(async (tile) => { await this.selectTile(tile); }, this);\r\n\r\n        //Add Matrix Coords\r\n        tile.row = row;\r\n        tile.col = col;\r\n      };\r\n    };\r\n\r\n    this.tilesGroup = tilesGroup;\r\n\r\n    this.destroyMatchedTiles();\r\n  };\r\n\r\n  setTileSize(tile) {\r\n    // Dynamic Tile Size Set\r\n    this.playAreaSize.tileWidth = tile.width;\r\n    this.playAreaSize.tileHeight = tile.height;\r\n  };\r\n\r\n  calculatePadding() {\r\n    // Dynamic Left Padding Calculation\r\n    this.playAreaSize.tilePaddingLeftAndRight = (this.game.width - (this.playAreaSize.offsetX * 2) - this.playAreaSize.tileWidth * (this.gridSize.width)) / (this.gridSize.width - 1);\r\n  };\r\n\r\n  selectTile(tile) {\r\n\r\n    if (this.cursorDisabled) return;\r\n\r\n    tile.alpha = 0.65;\r\n    this.selectMusic.play();\r\n\r\n    //Swap Tiles\r\n    if (this.selectedTile) {\r\n      tile.alpha = 1;\r\n      this.selectedTile.alpha = 1;\r\n\r\n      //Check if swap available\r\n      if (!this.isSwapAvailable(this.selectedTile, tile)) {\r\n        this.selectedTile = null;\r\n        return;\r\n      };\r\n\r\n      //Swap Tiles\r\n      this.swapTiles(tile);\r\n\r\n      return;\r\n    };\r\n\r\n    this.selectedTile = tile;\r\n  };\r\n\r\n  swapTiles(tile) {\r\n\r\n    const bufferFirstValue = this.tilesArray[tile.row][tile.col];\r\n    const bufferSecondValue = this.tilesArray[this.selectedTile.row][this.selectedTile.col];\r\n\r\n    {\r\n      const tilesArrayShallowCopy = JSON.parse(JSON.stringify(this.tilesArray));\r\n      tilesArrayShallowCopy[tile.row][tile.col] = bufferSecondValue;\r\n      tilesArrayShallowCopy[this.selectedTile.row][this.selectedTile.col] = bufferFirstValue;\r\n\r\n      if (this.getMatch(tilesArrayShallowCopy)[0] === undefined) {\r\n        this.cursorDisabled = true;\r\n        //Visual Swap\r\n        [this.selectedTile.position.x, tile.position.x] = [tile.position.x, this.selectedTile.position.x];\r\n        [this.selectedTile.position.y, tile.position.y] = [tile.position.y, this.selectedTile.position.y];\r\n\r\n        setTimeout(() => {\r\n          //Visual Swap BAck\r\n          [this.selectedTile.position.x, tile.position.x] = [tile.position.x, this.selectedTile.position.x];\r\n          [this.selectedTile.position.y, tile.position.y] = [tile.position.y, this.selectedTile.position.y];\r\n          this.selectedTile = null;\r\n          this.cursorDisabled = false;\r\n        }, 200);\r\n        \r\n        return;\r\n      };\r\n    }\r\n\r\n    this.tilesArray[tile.row][tile.col] = bufferSecondValue;\r\n    this.tilesArray[this.selectedTile.row][this.selectedTile.col] = bufferFirstValue;\r\n\r\n    this.drawTiles();\r\n\r\n    //Visual Swap\r\n    // [this.selectedTile.position.x, tile.position.x] = [tile.position.x, this.selectedTile.position.x];\r\n    // [this.selectedTile.position.y, tile.position.y] = [tile.position.y, this.selectedTile.position.y];\r\n\r\n    this.selectedTile = null;\r\n  };\r\n\r\n  isSwapAvailable(firsTile, secondTile) {\r\n    if (\r\n      firsTile.position.x === secondTile.position.x\r\n      &&\r\n      Math.abs(firsTile.position.y - secondTile.position.y) < (2 * this.playAreaSize.tileHeight + this.playAreaSize.tilePaddingTopAndBottom)\r\n      &&\r\n      firsTile.key != secondTile.key\r\n    ) {\r\n      return true;\r\n    };\r\n    if (\r\n      firsTile.position.y === secondTile.position.y\r\n      &&\r\n      Math.abs(firsTile.position.x - secondTile.position.x) < (2 * this.playAreaSize.tileWidth + this.playAreaSize.tilePaddingLeftAndRight)\r\n      &&\r\n      firsTile.key != secondTile.key\r\n    ) {\r\n      return true;\r\n    };\r\n  };\r\n\r\n  getMatch(matrix) {\r\n    const matchList = [];\r\n\r\n    //Horizontal Check Match\r\n    for (let row = 0; row < this.gridSize.height; row++) {\r\n      let match = 1;\r\n\r\n      for (let col = 0; col < this.gridSize.width; col++) {\r\n\r\n        //Check If Last Tile\r\n        if (col + 1 === this.gridSize.width) {\r\n          if (match >= 3) {\r\n            matchList.push({\r\n              length: match, startPoint: {\r\n                row: row,\r\n                col: col + 1 - match\r\n              }, horizontal: true\r\n            });\r\n            break;\r\n          };\r\n        };\r\n\r\n        if (col != this.gridSize.height - 1) {\r\n          //Increase Match Value\r\n          if (matrix[row][col] === matrix[row][col + 1]) {\r\n            match += 1;\r\n          };\r\n\r\n          //Reset Match Value\r\n          if (matrix[row][col] != matrix[row][col + 1] && match < 3) {\r\n            match = 1;\r\n          };\r\n\r\n          //Save Match Value\r\n          if (matrix[row][col] != matrix[row][col + 1]) {\r\n            if (match >= 3) {\r\n              matchList.push({\r\n                length: match, startPoint: {\r\n                  row: row,\r\n                  col: col + 1 - match\r\n                }, horizontal: true\r\n              });\r\n              match = 1;\r\n            };\r\n          };\r\n        };\r\n      };\r\n    };\r\n\r\n    // Vertical Check Match\r\n    for (let col = 0; col < this.gridSize.width; col++) {\r\n      let match = 1;\r\n\r\n      for (let row = 0; row < this.gridSize.height; row++) {\r\n\r\n        //Check If Last Tile\r\n        if (row + 1 === this.gridSize.height) {\r\n          if (match >= 3) {\r\n            matchList.push({\r\n              length: match, startPoint: {\r\n                row: row + 1 - match,\r\n                col: col\r\n              }, horizontal: false\r\n            });\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (row != this.gridSize.height - 1) {\r\n          //Increase Match Value\r\n          if (matrix[row][col] === matrix[row + 1][col]) {\r\n            match += 1;\r\n          };\r\n\r\n          //Reset Match Value\r\n          if (matrix[row][col] != matrix[row + 1][col] && match < 3) {\r\n            match = 1;\r\n          };\r\n\r\n          //Save Match Value\r\n          if (matrix[row][col] != matrix[row + 1][col]) {\r\n            if (match >= 3) {\r\n              matchList.push({\r\n                length: match, startPoint: {\r\n                  row: row + 1 - match,\r\n                  col: col\r\n                }, horizontal: false\r\n              });\r\n              match = 1;\r\n            };\r\n          };\r\n        };\r\n      };\r\n    };\r\n\r\n    return matchList;\r\n  };\r\n\r\n  destroyMatchedTiles() {\r\n    const matchedTiles = this.getMatch(this.tilesArray);\r\n    if (matchedTiles[0] === undefined) {\r\n      this.cursorDisabled = false;\r\n      return;\r\n    };\r\n\r\n    this.cursorDisabled = true;\r\n\r\n    const destructionArray = [];\r\n\r\n    //Fill destructionArray with false values\r\n    for (let i = 0; i < this.gridSize.width * this.gridSize.height; i++) {\r\n      destructionArray[i] = false;\r\n    };\r\n\r\n    //Add destruction item's index to destructionArray\r\n    matchedTiles.map(({ length, startPoint: { row, col }, horizontal }) => {\r\n\r\n      //Horizontal Matches\r\n      if (horizontal) {\r\n        const startPosition = (row) * this.gridSize.width + col;\r\n        const endPosition = startPosition + length;\r\n\r\n        for (let i = startPosition; i < endPosition; i++) {\r\n          destructionArray[i] = true;\r\n          this.increseScore(1);\r\n        };\r\n\r\n      };\r\n\r\n      //Vertical Matches\r\n      if (!horizontal) {\r\n        const startPosition = (row) * this.gridSize.width + col;\r\n        const endPosition = startPosition + (length - 1) * this.gridSize.width;\r\n\r\n        for (let i = startPosition; i <= endPosition; i += this.gridSize.width) {\r\n          destructionArray[i] = true;\r\n          this.increseScore(1);\r\n        };\r\n      };\r\n    });\r\n\r\n    //Remove Children\r\n    for (let i = 0; i < this.gridSize.width * this.gridSize.height; i++) {\r\n      if (destructionArray[i]) {\r\n        setTimeout(() => {\r\n          this.tilesGroup.children[i].alpha = 0.5;\r\n        }, 1000);\r\n      };\r\n    };\r\n\r\n    this.killMusic.play();\r\n\r\n    setTimeout(() => {\r\n      this.updateTilesArray(destructionArray);\r\n    }, 500);\r\n  };\r\n\r\n  updateTilesArray(destructionArray) {\r\n\r\n    //Build Deleted Objects Map\r\n    let index = 0;\r\n\r\n    // const tilesArrayShallowCopy = this.tilesArray.concat(); //.concat() and spread don't give shallow copy. Keeps refer to original array. Babel bug?\r\n    // const tilesArrayShallowCopy = [...this.tilesArray];\r\n    const tilesArrayShallowCopy = [...this.tilesArray];\r\n    const tilesArrayShallowCopyString = JSON.stringify(this.tilesArray);\r\n\r\n    for (let row = 0; row < this.tilesArray.length; row++) {\r\n      for (let col = 0; col < this.tilesArray[row].length; col++) {\r\n        tilesArrayShallowCopy[row][col] = destructionArray[index];\r\n        index++;\r\n      };\r\n    };\r\n\r\n    this.tilesArray = JSON.parse(tilesArrayShallowCopyString);\r\n\r\n    //Delete Matched Tiles From tilesArray\r\n    for (let row = 0; row < this.tilesArray.length; row++) {\r\n      for (let col = 0; col < this.tilesArray[row].length; col++) {\r\n        if (tilesArrayShallowCopy[row][col]) {\r\n          tilesArrayShallowCopy[row][col] = null;\r\n        } else {\r\n          tilesArrayShallowCopy[row][col] = this.tilesArray[row][col];\r\n        };\r\n      };\r\n    };\r\n\r\n\r\n    //Shift Values Down, 'null' up. Iteration required to up all 'null' above values\r\n    for (let iteration = 0; iteration < this.tilesArray.length; iteration++) {\r\n      for (let row = this.tilesArray.length - 1; row > 0; row--) {\r\n        for (let col = this.tilesArray[row].length - 1; col > -1; col--) {\r\n\r\n          if (tilesArrayShallowCopy[row][col] === null) {\r\n\r\n            //Swap values if required\r\n            if (tilesArrayShallowCopy[row - 1][col] !== null) {\r\n\r\n              tilesArrayShallowCopy[row][col] = tilesArrayShallowCopy[row - 1][col];\r\n              tilesArrayShallowCopy[row - 1][col] = null;\r\n            };\r\n          };\r\n        };\r\n      };\r\n    };\r\n\r\n    //Fill arrray where empty('null') \r\n    for (let row = 0; row < this.tilesArray.length; row++) {\r\n      for (let col = 0; col < this.tilesArray[row].length; col++) {\r\n        if (tilesArrayShallowCopy[row][col] === null) {\r\n          let randomTileIndex = Math.floor(Math.random() * (this.tileList.length));\r\n          tilesArrayShallowCopy[row][col] = this.tileList[randomTileIndex];\r\n        };\r\n      };\r\n    };\r\n\r\n    this.tilesArray = tilesArrayShallowCopy;\r\n\r\n    setTimeout(() => { this.drawTiles(); }, 2000); \r\n  };\r\n\r\n  increseScore(score) {\r\n    this.score += score * 25;\r\n\r\n    this.scoreText.text = this.score;\r\n  };\r\n\r\n  startTimer() {\r\n    this.timeIntervalID = setInterval(() => { this.updateTimer() }, 1000);\r\n  };\r\n\r\n  updateTimer() {\r\n    if (this.restOfTime > 0) {\r\n      //Update Time\r\n      this.restOfTime = this.restOfTime - 1;\r\n      this.timeText.text = `Time: ${this.restOfTime}`;\r\n      if (this.restOfTime < 2) this.cursorDisabled = true;\r\n\r\n    } else {\r\n      //Go to result screen\r\n      this.game.gameScore = this.score;\r\n      clearInterval(this.timeIntervalID);\r\n      this.state.start('ResultState');\r\n    };\r\n  };\r\n};\r\n\r\nexport default GameState;   \r\n",
    "class ManuState extends Phaser.State {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.muteMusic = false;\r\n\t}\r\n\r\n\tpreload() {\r\n\t\tthis.load.image('background', './assets/images/backgrounds/background.jpg');\r\n\t\tthis.load.image('sfx', './assets/images/btn-sfx.png');\r\n\t\tthis.load.image('logo', './assets/images/donuts_logo.png');\r\n\t\tthis.load.image('btn-play', './assets/images/btn-play.png');\r\n\r\n\t\tthis.load.audio('background', './assets/audio/background.mp3');\r\n\t};\r\n\r\n\tcreate() {\r\n\t\t//Add background music\r\n\t\tthis.backgroundMusic = this.add.audio('background');\r\n\t\tthis.backgroundMusic.play('', 0, 1, true); \r\n\t\t//Set background\r\n\t\tconst bg = this.add.sprite(-20, -20, 'background');\r\n\t\tbg.scale.setTo(0.95);\r\n\r\n\t\t//Set sfx button\r\n\t\tconst btn_sfx = this.add.sprite(0, 5, 'sfx');\r\n\t\tbtn_sfx.scale.setTo(0.75);\r\n\t\tbtn_sfx.x = this.game.width - btn_sfx.width - 5;\r\n\r\n\t\t//Click button event\r\n\t\tbtn_sfx.inputEnabled = true;\r\n\t\tbtn_sfx.events.onInputDown.add(this.muteBackgroundMusic, this);  \r\n\r\n\t\t//Set logo\r\n\t\tconst logo = this.add.sprite(0, 0, 'logo');\r\n\t\tlogo.scale.setTo(0.9);\r\n\t\tlogo.x = (this.game.width / 2) - (logo.width / 2);\r\n\t\tlogo.y = logo.height * 0.5;\r\n\r\n\t\t//Set play button\r\n\t\tconst btn_play = this.add.sprite(0, 0, 'btn-play');\r\n\t\tbtn_play.scale.setTo(0.95);\r\n\t\tbtn_play.x = (this.game.width / 2) - (btn_play.width / 2);\r\n\t\tbtn_play.y = logo.y + logo.height + 30;\r\n\r\n\t\t//Click button event\r\n\t\tbtn_play.inputEnabled = true;\r\n\t\tbtn_play.events.onInputDown.add(this.playGame, this);\r\n\t};\r\n\r\n\tplayGame(sprite) {\r\n\t\tsprite.alpha = 0.85;\r\n\t\t//---Kind of animation ---\\\\\r\n\t\tsetTimeout(() => { sprite.alpha = 1; }, 100);\r\n\t\tsetTimeout(() => { this.state.start('GameState'); }, 500);\r\n\t};\r\n\r\n\tmuteBackgroundMusic(sprite) { \r\n\t\tthis.muteMusic = !this.muteMusic;\r\n\r\n\t\tsprite.alpha = 0.85;\r\n\t\tsetTimeout(() => { sprite.alpha = 1; }, 100); \r\n\r\n\t\tif (this.muteMusic) {\r\n\t\t\tthis.backgroundMusic.volume = 0;\r\n\t\t} else {\r\n\t\t\tthis.backgroundMusic.volume = 1;\r\n\t\t};\r\n\t};\r\n\r\n}\r\n\r\nexport default ManuState;   \r\n",
    "class ResultState extends Phaser.State {\r\n\r\n  preload() {\r\n    this.load.image('background', './assets/images/backgrounds/background.jpg');\r\n    this.load.image('timeup', './assets/images/text-timeup.png');\r\n    this.load.image('score', './assets/images/bg-score.png');\r\n\r\n\r\n    this.load.image('particle_ex1', './assets/images/particles/particle_ex1.png');\r\n    this.load.image('particle_ex2', './assets/images/particles/particle_ex2.png');\r\n    this.load.image('particle_ex3', './assets/images/particles/particle_ex3.png');\r\n    this.load.image('particle_1', './assets/images/particles/particle-1.png');\r\n    this.load.image('particle_2', './assets/images/particles/particle-2.png');\r\n    this.load.image('particle_3', './assets/images/particles/particle-3.png');\r\n    this.load.image('particle_4', './assets/images/particles/particle-4.png');\r\n    this.load.image('particle_5', './assets/images/particles/particle-5.png');\r\n\r\n  };\r\n\r\n  create() {\r\n    //Set background\r\n    const bg = this.add.sprite(-20, -20, 'background');\r\n    bg.scale.setTo(0.95);\r\n\r\n    //Particles\r\n    const particles_1 = this.add.emitter(-15, -15, 250);\r\n    particles_1.makeParticles(['particle_ex1', 'particle_ex2', 'particle_ex3', 'particle_1', 'particle_2', 'particle_3', 'particle_4', 'particle_5']);\r\n    particles_1.minParticleSpeed.setTo(-300, -300);\r\n    particles_1.maxParticleSpeed.setTo(3000, 3000);\r\n\r\n    particles_1.minRotation = 50;\r\n    particles_1.maxRotation = 50;\r\n\r\n    particles_1.start(false, 3000, 10);\r\n\r\n    //Set timeup text\r\n    const timeup = this.add.sprite(0, 0, 'timeup');\r\n    timeup.x = (this.game.width / 2) - (timeup.width / 2);\r\n    timeup.y = 100;\r\n\r\n    //Set score \r\n    const scroreBoard = this.add.sprite(0, 0, 'score');\r\n    scroreBoard.x = (this.game.width / 2) - (scroreBoard.width / 2);\r\n    scroreBoard.y = 100 + timeup.height + 50;\r\n\r\n    //Score text\r\n    const scoreText = this.add.text(50, 50, this.game.gameScore, { fontSize: '44px', fill: '#fff' });\r\n    scoreText.x = this.game.width / 2 - 40;\r\n    scoreText.y = scroreBoard.y + scroreBoard.height / 2 - 40;\r\n  };\r\n\r\n};\r\n\r\nexport default ResultState;   \r\n"
  ]
}